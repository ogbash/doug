#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single
\papersize a4paper
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\end_header

\begin_body

\begin_layout Title
DOUG - Domain Decomposition on Unstructured Grids
\end_layout

\begin_layout Title
User Guide
\end_layout

\begin_layout Section
Contents
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \tableofcontents{}

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Many codes exist in the open literature for solving elliptic PDEs using
 finite element methods.
 Use of a finite element method reduces the problem to that of solving a
 (sparse) linear system, often of very large size, expressed in matrix form.
 Whilst direct factorisation methods may be used to invert this matrix and
 obtain the solution this is often not practical due to the storage and
 time requirements for direct factorisation methods.
\end_layout

\begin_layout Standard
DOUG provides a framework for the iterative solution, on parallel computer
 architectures, of these linear systems, using the powerful domain decomposition
 technique.
\end_layout

\begin_layout Standard
By itself DOUG is NOT a package for solving PDEs using finite element methods,
 in order to be used in this way a finite element package must also be found.
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Subsection
Prerequisites
\end_layout

\begin_layout Standard
DOUG is built on top of several libraries that must be installed before
 DOUG is compiled.
\end_layout

\begin_layout Subsection
Configuration
\end_layout

\begin_layout Standard
DOUG uses 
\emph on
GNU Autotools
\emph default
 suite for configuration.
 In the simplest case, when all libraries are accessible to the compiler
 by default, DOUG can be configured by running configuration script in source
 directory:
\end_layout

\begin_layout LyX-Code
./configure
\end_layout

\begin_layout Standard
In case this succeeds, the next step is compilation.
 Otherwise some required libraries may be missing or not accessible.
 To explictly specify locations of libraries, parameters must given to 
\emph on
configure
\emph default
 script .
 To see all available options, run the following command:
\end_layout

\begin_layout LyX-Code
./configure --help
\end_layout

\begin_layout Subsection
Compilation
\end_layout

\begin_layout Standard
If configure script succeeded, DOUG can be compiled using make command
\end_layout

\begin_layout LyX-Code
make
\end_layout

\begin_layout Standard
Compilation may take few minutes, depending on platform.
 If compilation succeeds, then there are two options: DOUG can be used 
\begin_inset Quotes eld
\end_inset

in place
\begin_inset Quotes erd
\end_inset

 or DOUG can be installed into another directory by running the following
 command:
\end_layout

\begin_layout LyX-Code
make install
\end_layout

\begin_layout Standard
This step usually fails only if there is limited access to the installation
 directory (by default 
\begin_inset Quotes eld
\end_inset

/usr/local
\begin_inset Quotes erd
\end_inset

).
 In that case installation may require root access.
 If this is not available (or local installation is sufficient) then another
 option is to specify different installation directory during configuration:
\end_layout

\begin_layout LyX-Code
./configure --prefix=/home/myusername
\end_layout

\begin_layout Section
Using DOUG
\end_layout

\begin_layout Subsection
Running DOUG
\end_layout

\begin_layout Subsection
Configuration file format
\end_layout

\begin_layout Standard
DOUG configuration file is a simple text file containing locations of input
 files, output files.
 It also describes solution method and various parameters that can affect
 the the speed and memory usage ofthe program.
\end_layout

\begin_layout Standard
Each parameter is given in a separate line, using the following format
\end_layout

\begin_layout LyX-Code
parameter_name parameter_value
\end_layout

\begin_layout Standard
All parameter names are case-insensitive.
\end_layout

\begin_layout Subsubsection
Input and output files
\end_layout

\begin_layout Standard
The following table contains all parameters referring to external files
 or parameters describing formats or contents of external files
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="85text%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
input_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Input type: 1 for elemental format, 2 for assembled format
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
symmstruct
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
If true, then system matrix A is assumed to have the following property:
 A(i, j)==0 implies A(j, i)==0 for all i, j
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
symmnumeric
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
If true, then system matrix A is assumed to be symmetrical square matrix
 (A(i, j)==A(j, i) for all i, j)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
assembled_mtx_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
File containing system matrix in triple format (input_type=2)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
assembled_mtx_format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Format of the assembled matrix file: 0 (default) for text file, 1 for binary
 file, 2 for XDR file (input_type=2)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
assembled_rhs_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
File containing right-hand-side vector (input_type=2)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
assembled_rhs_format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Format of the right-hand-side vector file: 0 (default) for text-based format,
 1 for binary format, 2 for XDR file (input_type=2)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
info_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameters for elemental input format (input_type=1)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
elemmat_rhs_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Elemental matrices and RHS parts for all elements (input_type=1)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
freedom_lists_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mapping from local element freedoms to global freedoms (input_type=1)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
coords_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Geometrical coordinates for nodes in the geometrical grid (input_type=1)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
freemap_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Mapping from global freedoms to nodes (input_type=1)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
solution_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Solution file name (output)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
solution_format
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Format of the solution file: 0 for text-based output, 1 for unformatted
 binary output
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
dump_matrix_file
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
If parameter dump_matrix_only is true, then system matrix is written to
 this file (always in assembled format)
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
dump_matrix_only
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
If true, then DOUG stops after assembling the system matrix (if input is
 in elemental format) and writes system matrix to disk
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Formats of these files are described in the following sections.
 Note that not all parameters need to be defined.
\end_layout

\begin_layout Subsubsection
Solver parameters
\end_layout

\begin_layout Standard
The following parameters are used in the solver phase and can be used to
 fine-tune the solving process.
 The table lists general solver parameters that are common for both legacy
 solving method (2 level geometrical grid) and aggregation method.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="85text%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
solver
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Solver type.
 Possible values: 1 for CG (Conjugate Gradient) method, 2 for PCG (Preconditione
d CG)
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Used if solver is PCG.
 Describes preconditioner type.
 Possible values: 1 for Additive Schwartz, 2 for Multiplicative Schwartz,
 5 for MS on fine level and AS on coarse level
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
levels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Possible values: 1 - only fine level is used, 2 - a coarse matrix is formed
 and both fine and coarse levels are used
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
solve_tolerance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Largest acceptable relative error.
 Once this is achieved the iteration method stops
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
solver_maxiters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
The maximum number of solver iterations.
 If -1 or undefined, then solver built-in default is used
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The following table lists parameters relevant only to legacy method
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="85text%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
interpolation_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Determines the interpolation type used for coarse grid.
 Possible values: 1 - multilinear (default), 2 - Kriging, 3 - inverse distance
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Aggregation method depends on the following parameters
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
radius1, radius2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TODO
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
minasize1, minasize2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TODO
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
maxasize1, maxasize2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TODO
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
strong1, strong2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
TODO
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Debugging
\end_layout

\begin_layout Standard
DOUG supports various parameters for development purposes or tracking the
 progress of execution
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="left" valignment="top" leftline="true" rightline="true" width="85text%">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Parameter name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Description
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
debug
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Debug level.
 This parameter is reserved for developers only.
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
verbose
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Verbose level.
 Possible values: 0-10.
 If 0, then almost no information about the progress is written on the console.
 If 10, then lots of results of intermediate steps are written to the console.
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
plotting
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Plotting level.
 Possible values: 0 - plotting is never invoked, 1 - plotting is invoked
 for mesh and coarse mesh on master, 2 - plotting level 1 + aggregation
 result is shown graphically and local coarse mesh on is plotted (on master)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Input files formats
\end_layout

\begin_layout Subsubsection
Introduction
\end_layout

\begin_layout Standard
DOUG supports input files in various formats (both text based and binary).
 This section describes format of DOUG input and output files and presents
 few examples how to generate them or read them.
 DOUG can be used with both assembled matrices and with element matrices
 (usually produced by FEM software).
 
\end_layout

\begin_layout Standard
Note: DOUG is written in Fortran 95 and uses Fortran unformatted IO for
 reading elemental input files.
 This may be incompatible with applications producing DOUG input (or application
s consuming DOUG output) if applications are compiled with different Fortran
 compilers (or data files are used across multiple architectures).
 In that case user may need to store input files in a platform-independent
 format and convert them to valid host-specific unformatted files on host
 computers.
\end_layout

\begin_layout Subsubsection
Assembled format
\end_layout

\begin_layout Standard
Assembled format is specified by setting parameter 'input_type' to 2 in
 DOUG control file.
 Its format is defined using 'assembled_mtx_format' parameter, while the
 name of the matrix file is specified using 'assembled_mtx_file' parameter.
 In case when 'assembled_mtx_format' is 0, the file is assumed to be in
 text format and the first row in the file should contain 2 integers - the
 number of freedoms in the system and the number of following non-zero matrix
 elements.
 Each of the following lines should contain the row and column number and
 value for the non-zero elements (row and column numbers are indexed starting
 from 1).
\end_layout

\begin_layout Standard
For example, 2x2 identity matrix is described as:
\end_layout

\begin_layout LyX-Code
2 2
\end_layout

\begin_layout LyX-Code
1 1 1.0
\end_layout

\begin_layout LyX-Code
2 2 1.0
\end_layout

\begin_layout Standard
If the value of 'assembled_mtx_format' is 1, then the matrix file is assumed
 to be in unformatted binary format.
 First 2 integers describe the number of freedoms in the system and the
 number of following non-zero elements.
 Each element is encoded as a triple consisting of a row and column indexes
 and the value of the element.
 All elements must be read from the file as a single block.
\end_layout

\begin_layout Standard
If 'assembled_mtx_format' is set to 2, then the matrix file is read using
 XDR library (http://meteora.ucsd.edu/~pierce/fxdr_home_page.html).
 The first 2 fields in the file are integers, describing the number of freedoms
 and the number of non-zero elements.
 After this come matrix elements - each element is encoded as a triple -
 consisting of row and column index (integers) and the element value (double-pre
cision floating point value).
 Note that files in XDR format are platform-independent and have approximately
 the same size as platform-specific binary files.
\end_layout

\begin_layout Standard
System RHS vector file is specified using 'assembled_rhs_file' parameter.
 Its format depends on 'assembled_rhs_format' parameter.
 If 0, then RHS vector is specified in text format as a dense array.
 The first line must contain the dimension of the vector (note: must be
 same as the dimension of the matrix!).
 Following lines contain vector component values.
\end_layout

\begin_layout Standard
For example, 2d vector (5, 1) is described as:
\end_layout

\begin_layout LyX-Code
2
\end_layout

\begin_layout LyX-Code
5.0
\end_layout

\begin_layout LyX-Code
1.0
\end_layout

\begin_layout Standard
If the value of 'assembled_rhs_format' is 1, then the RHS vector is assumed
 to be in unformatted binary format.
 The first element of the binary format is the size of the vector.
 After that come values of the RHS vector (must be read as a single continuous
 block).
\end_layout

\begin_layout Standard
If the value of 'assembled_rhs_format' is 2, then RHS vector is assumed
 to be in XDR format.
 Like in platform-specific binary format, the first element of the file
 is the size of the RHS vector (integer) and the following elements are
 actual values of the RHS vector (double-precision floating point numbers).
\end_layout

\begin_layout Subsubsection
Elemental format
\end_layout

\begin_layout Standard
Elemental format is specified by setting parameter 'input_type' to 1 in
 DOUG configuration file.
 If elemental format is used, then user must specify at least 3 data files:
 mesh info file, freedom lists file and file containing element values and
 RHS vector values.
 With elemental format, full system matrix is presented indirectly - the
 full system matrix can be extracted by summing all element matrices together
 (with corresponding node remapping).
 In elemental format the RHS vector is also associated with elements and
 when summed together, forms the final RHS vector.
 So, both matrix and RHS vector data are contained in a single file.
\end_layout

\begin_layout Subsubsection
Mesh info file
\end_layout

\begin_layout Standard
Mesh info file is specified by parameter 'info_file'.
 The file is in binary format and must contain 5 INTEGERs stored as one
 continous record:
\end_layout

\begin_layout LyX-Code
NELL NGF NSD MFRELT NNODE
\end_layout

\begin_layout Standard
This file provides information about the finite element mesh, in particular
 the number of elements (NELL), the number of freedoms (NGF), the spatial
 dimension (NSD), (i.e.
 2 or 3), the maximum number of freedoms on an element (MFRELT), and the
 number of nodes in the finite element grid (NNODE).
 
\end_layout

\begin_layout Subsubsection
Freedom lists file
\end_layout

\begin_layout Standard
Freedom lists file is specified by 'freedom_lists_file' parameter.
 This file provides, for each element, the number of freedoms that lie on
 the element, followed by a list of the freedom numbers.
 For each element el (1..NELL), these INTEGER entries are stored as one record
 in the following format 
\end_layout

\begin_layout LyX-Code
NELFR(el) FREELIST(1,el) FREELIST(2,el) ..
 FREELIST(NELFR(el),el)
\end_layout

\begin_layout Standard
Example for generating the file
\end_layout

\begin_layout LyX-Code
open(iounit, FILE='freelists', STATUS='OLD', FORM='UNFORMATTED')
\end_layout

\begin_layout LyX-Code
do el=1,NELL
\end_layout

\begin_layout LyX-Code
  write (iounit) NELFR(el), (FREELIST(k,el), k=1,NELFR(el))
\end_layout

\begin_layout LyX-Code
end do
\end_layout

\begin_layout LyX-Code
close(iounit)
\end_layout

\begin_layout Subsubsection
Element and RHS vector file
\end_layout

\begin_layout Standard
Both matrix and RHS vector are specified by parameter 'elemmat_rhs_file'.
 The file must contain element values for each element freedoms followed
 by the corresponding right hand side of the element.
 Element row values and RHS vector values are written as sequences of DOUBLE
 PRECISION values.
 For each element el (1..NELL), the file should contain following values
\end_layout

\begin_layout LyX-Code
ELEM(1,1,el) ELEM(2,1,el) ..
 ELEM(NELFR(el),1,el)
\end_layout

\begin_layout LyX-Code
ELEM(1,2,el) ELEM(2,2,el) ..
 ELEM(NELFR(el),2,el)
\end_layout

\begin_layout LyX-Code
..
\end_layout

\begin_layout LyX-Code
ELEM(1,NELFR(el),el) ELEM(2,NELFR(el),el) ..
 ELEM(NELFR(el),NELFR(el),el)
\end_layout

\begin_layout LyX-Code
RHS(1,el) RHS(2,el) ..
 RHS(NELFR(el), el)
\end_layout

\begin_layout Standard
Example for generating the file
\end_layout

\begin_layout LyX-Code
open(iounit, FILE='elemmat_rhs', STATUS='OLD', FORM='UNFORMATTED')
\end_layout

\begin_layout LyX-Code
do el=1,NELL
\end_layout

\begin_layout LyX-Code
  do j=1,NELFR(el)
\end_layout

\begin_layout LyX-Code
    write (iounit) (ELEM(k,j,el), k=1,NELFR(el))
\end_layout

\begin_layout LyX-Code
  end do
\end_layout

\begin_layout LyX-Code
  write (iounit) (RHS(k, el), k=1,NELFR(el))
\end_layout

\begin_layout LyX-Code
end do
\end_layout

\begin_layout LyX-Code
close(iounit)
\end_layout

\begin_layout Subsubsection
Mesh coordinate file
\end_layout

\begin_layout Standard
Mesh coordinate file is specified by parameter 'coords_file'.
 This file provides the spatial location of the nodes in the finite element
 grid.
 The format is DOUBLE PRECISION and the entries are stored in one continuous
 record as 
\end_layout

\begin_layout LyX-Code
XYZ(1,1) ..
 XYZ(NSD,1) XYZ(1,2) ..
 XYZ(NSD,2) ..
 ..
 XYZ(NSD,NNODE).
\end_layout

\begin_layout Standard
This file is optional.
\end_layout

\begin_layout Subsubsection
Freedom mapping file
\end_layout

\begin_layout Standard
DOUG supports custom mapping of freedoms to nodes.
 In the general case NGF may be smaller than NNODE.
 If 'freemap_file' is specified (optional), then this file must contain
 node number for each freedom.
 The file must contain a single continous record of INTEGERs in the following
 format
\end_layout

\begin_layout LyX-Code
FREEMAP(1) FREEMAP(2) ..
 FREEMAP(NGF)
\end_layout

\begin_layout Standard
If 'freemap_file' parameter is not specified, then it is assumed that freedoms
 1..NGF correspond to nodes 1..NGF.
\end_layout

\begin_layout Subsubsection
Freedom mask file
\end_layout

\begin_layout Standard
Optional parameter, specified by 'freedom_mask_file'.
 Currently unused, reserved for future.
\end_layout

\begin_layout Subsection
Output file formats
\end_layout

\begin_layout Standard
DOUG can output solution vector in both text and binary formats.
 The name of the output file is specified by 'solution_file' parameter and
 its format by 'solution_format' parameter.
\end_layout

\begin_layout Subsubsection
Text format
\end_layout

\begin_layout Standard
If 'solution_format' is set to 0, output file is written in text format.
 The first row contains the size of the vector and each following row in
 the output file corresponds to a single node value of the solution.
 For example, solution vector (3,5) is written as
\end_layout

\begin_layout LyX-Code
2
\end_layout

\begin_layout LyX-Code
3.0
\end_layout

\begin_layout LyX-Code
5.0
\end_layout

\begin_layout Subsubsection
Binary format
\end_layout

\begin_layout Standard
Solution is written in unformatted binary format when 'solution_format'
 is set to 1.
 Solution is written as a single continuous record of DOUBLE PRECISION reals
 in the following format
\end_layout

\begin_layout LyX-Code
X(1) X(2) ..
 X(NNODE)
\end_layout

\begin_layout Subsection
Examples
\end_layout

\begin_layout Subsubsection
Simple FEM problem
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \label{sec:example}

\end_inset

 Here we demonstrate what is meant by element stiffness matrices and element
 right hand side vectors for a simple problem.
\end_layout

\begin_layout Standard
Consider the partial differential equation (PDE) 
\begin_inset Formula \begin{equation}
-\Delta u=1,\label{exam:pde}\end{equation}

\end_inset

 on the domain 
\begin_inset Formula $\Omega=(0,1)\times(0,1)$
\end_inset

.
 With the Dirichlet condition 
\begin_inset Formula $u=1$
\end_inset

 on 
\begin_inset Formula $y=1$
\end_inset

, and zero Neumann boundary condition elsewhere.
\end_layout

\begin_layout Standard
In the usual way we seek a solution 
\begin_inset Formula $u\in U$
\end_inset

, where 
\begin_inset Formula $U$
\end_inset

 is the Hilbert space 
\begin_inset Formula $H^{1}(\Omega)$
\end_inset

.
 Define a trial space 
\begin_inset Formula $V\subset U$
\end_inset

, such that 
\begin_inset Formula $V=\{ v\in H^{1}:v=0\mbox{ on }y=1\}$
\end_inset

.
 By multiplying (
\begin_inset LatexCommand \ref{exam:pde}

\end_inset

) by 
\begin_inset Formula $v\in V$
\end_inset

 we produce the weak form 
\begin_inset Formula \begin{equation}
\int_{\Omega}\nabla u.\nabla v=\int_{\Omega}v,\mbox{ for all }v\in V.,\label{exam:weak}\end{equation}

\end_inset

 or, in a more abstract form: 
\begin_inset Formula \begin{eqnarray*}
a(u,v)=f(v),\mbox{ for all }v\in V.\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Graphics
	filename ../pictures/fem_example.eps

\end_inset


\end_layout

\begin_layout Caption
Simple mesh, showing node and element numbers
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Using FreeFEM++ package for creating sparse linear system
\end_layout

\begin_layout Section
DOUG Internals
\end_layout

\begin_layout Subsection
Domain Decomposition methods
\end_layout

\begin_layout Subsection
Solvers
\end_layout

\begin_layout Subsection
Sequence of execution
\end_layout

\begin_layout Section
Bibliography
\end_layout

\begin_layout Standard
\begin_inset LatexCommand \bibtex[plain]{}

\end_inset


\end_layout

\end_body
\end_document
