%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.95a Copyright 2005 Radical Eye Software
%%Title: autotools_flow.dvi
%%BoundingBox: 148 524 490 668
%%DocumentFonts: CMR10 CMSL10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o autotools_flow.eps autotools_flow.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2006.09.19:1252
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 4, 04/05/10
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
  z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def /x x Coef mul def /y1 y1 Coef mul def /x1 x1 Coef mul def
  x1 0 gt y1 0 gt x 0 gt y 0 gt and { [ y x y1 x1 ] 1 a sub y mul}
  { [ 1 0] 0 } ifelse setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
    n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSL10
%!PS-AdobeFont-1.1: CMSL10 1.0
%%CreationDate: 1991 Aug 20 16:40:20
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
end readonly def
/FontName /CMSL10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 101 /e put
dup 102 /f put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 115 /s put
readonly def
/FontBBox{-62 -250 1123 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9429B9D40924DC059325D9D4CC0344F3F997A99E6CC0676735EBCD685AAC9142
08DAFEC78BB41AFC2F1C219910BDF41D6279284EF600B69776CA15BC8A34347C
30783C52AFA60FBE3E353E2AE354CF87B558776A22C776C7A0B5AB5CE1F941EF
C2D9CAC37294BF407A671F10E4743BF842143F4F7DFEE643BA3BBD8BB9E3F24A
BCCF7F0ADF8BA500620C81033EAE8C4EF2C1DEF13AC575F1B3BBB66F093D3B78
5412B82B67FFA087AF57182B2230F9F2137180CA58A7D9B2C822FF04BE6CD01D
43B2CA7058C7B953F6D9B5D6E91ECBAA5CDE1159B0E59C83DBAD96D6C8C8BAB1
374EF652D10C0F3EE7104472C98DD3572AAF2D45A70BF7061447E21EE3C3BF23
DF39C2D1B35B42CD5297BEBE6BC94F7C9DC6E61EC67E4F677256FED9064BD3E4
B51A71B1D27CA4E5AA9E1D8080E6DAB5310711EEF87C40859FA935B19524AE83
63B163FA8397BDFF443227FEDF7DB27DC35D89FB1C5E435DA0619A5C88AFC73B
89A2DF5E767C5B536BC7167A840A0C32BD57A14DE69A7D0D819AC36FF32F908A
5070F32983BB007437E3500799DF5E0AD3710A4C0000F0098D5BE99F2EB9C1C2
C444FD9552D0DCA098A94B3BF176F511CEE13DB7EFFAED7C47B5ADCF8D4700F5
7B6DF50EE617C00966B9A2828882804DB7477F4A8CF5345B7F3568B4F72BCE73
2E2AA5BC4B4C70E21F3AD9AFC3B8605A00D67EF9ED1F4D13DDAA920D45B43CE0
0941BF17CF05D2B777C11D4D844AB20C0693D1DDF00B27D9E1AA2D98A4A06CC6
D342AD8F644F4787B66CA7D861E7CE13FCDA85C1B0C9F94009768EA89838EBA2
7818F400DCF28DF6BCCDF635C6C4C6AB9A409C0BECC7DB53AF3D417847C5EC29
A30EA6208755E5D6E1909C9BCB5D0A81E547D187D26EE88EBE5452AC2F97D2BE
7C18813615D25383A0489CAA43E353BE067394897FCC6784B7658DB29870C7D7
C3341428853C8154F94E5AB6527FD91CD53C2644A62021E8034341F8ADA8FB3D
9C705A56FA3FCA338640C8C2AB81B0B25ACB961BA6AAB7F13D1CA8200A0FE5E6
D8AA11198424EFC2A3A5D40E250B3BD124778988E1870237F079B9A8321ABD88
4860AAB6B333331CF68A4C0502E9FCF3ACBF78665F9FB3AC18A60215BD102D91
5A41504CB98DD5B0520306EA309E657BFC81838D71C973E063A618504DB0D079
F2C2D3F49C77CCD5078A639F05EE0009112F18F8A95780E871635BEDA8E2AC0A
FAE66D94A4E46CBA06433DBA132E92CF2FAEFBC90713D1408BB67D52B1EE9A9A
63804B900F4A4A92A699DA3FE7BCC97720E7ED7257D1E9F84F0DF7AB04312C11
CAF9AE848B17BDA18B8C3C12830F0E9499DD11F2A5667A0AC4841931CD49C484
BFBC8AF92E5DECF8EED9237E37662FED030FE9D85A7CB017D56574A803D589B4
949129068E309134AA18225BFDA774D5154FBF467A2C74C03239C509E67FB33D
DAF0E7684C8B17A901B0A483ED33BE72C52B39CF894439C67B7CC50B91F6F95C
B0D4B2D2A31CA92C28BDC2C30C2FDAE0A23B23F1EDCF823A9FDC9E4F43CD152C
774357948654FFB1EA545C4C2536DC356C81A8E1D8FBB42BAD355FA8007FEC01
276F405505A4C926616F606B4F9C1206B7B4959DF953F6502902BE7AD99424C0
8BA9ED2AA80BD1B5603CE23D187FDD07B0EDC1192F82B2D5AF4F891DF051676E
A9F114D905A27577908EE2FFB9F767168A22024F970D9EF6AFA1907785F290BF
E7F2302F5B386A88D6A06094B155388A1AF7A34DCA0348119821D53B2C051AFD
88D42FD01460FE2FC69564D0372529CCDC7AC46551111232F3674161949EDFAE
314477A366681B1AA7677C2995B3A3BA8EBECA67D6AD5671D7AADB062D4E7F59
540C975C61AD54469ABE3489D94A7628A5AF2CB5D11FCB474D1B19D453DB28E0
DBF673B3276E067D93973ADDD0AEB06DFFE4BA70A892CBBC0D82136FB2669EF0
A77C1BEF12371DD17DB2465BB8D55BDC230B494EDDC98E6A00EF302C7FCF36FE
6E194E6C92DF1CB1EF21CC17D572BE66B5F71C404CF451FE71F76B931B756106
75BEDC10A4E628A06B2895319B9C0BA6A2DA3F441F9E4E62A36059462B9974A6
C4A59E3435473AA68DD573886E19DB133E2914683F333CC0E78D54BACAF32A97
2A156C94B7585F8590E080E8E9311D862283DBAB0CFA26123036E86AAE04AA1A
7C627D6EB0A9AC2048DF1E0ACB891D43692EE5A451943F289D5A5C8CCAB135DA
2786AF0FD1345014C8D48A7D14261EC3918D1B28399387212DD601842B4C5967
00D0EF8167C820A5D7E9CAB70CFF12398D1FC78EF0935EBD7DA028325D22CC73
75BC2B3BA6F8B0D04998460CA1B956B00E3C397E961F403FDE345B1D67553A1C
BE40ABE10801FFB19DDA909CD71690E85C255E4C0BA46897070BBA22EA25BEE1
802E9BC74D9A6C9E026C2828DF6D510D3F9294F84FA9293312840D28438BB8AB
5513D653B0C735649F82D416006D1F660D9BEF40FF2B3ADD7057F5A0CA19C8AB
FBE03DBA076DDA611AEF8FB790429B9308651D517F06FD26DB1AD0A52E3C62E3
E95588E1ADB25B8EA86129E64B664DF53779B812660FED96C925A0DA135F1864
AD7D0D24945D1744F9AFEA2E30EB78DDF0906332B4C51B264D7B8BF58E339ADB
3BFFEAF024136E5D4F4B7D3C93AD3F8AA3FAFB724C31044CCA6E46F2AAE5CEEC
E8A66CD738A7430F36776B54DA810BFA986DEAA787AA543C5EE5EC1EE294802A
DA7906A3B7087EBC2912C0571AFFAD7636E818233062961ADCEFC288172E9FBA
155D92BC235781EC7CDC9F021B494AD82F51AB746355663AD03D0C59CA7F689E
571D651DCE944DA1D532B58510E340D225F590F39A7BBB82E10430359CB43786
D41F7FD5E9A1BE65EC49C9F91E0A6C3244C6121D006FB80A3FD9936B0203EC68
FFA1C8EF07386EE0AA0F528F8DE8D26FB433D72D87AE72A59DD16C421190BCEF
2A021DF50B4E373F1D40F809CA01638F2B548450BD827FFA8AFC1194460263CA
82D144E31176D9BA4AE783A877037C4EDF5ABF0044E59D333B8C0839C198DCDF
26EB7D5EACF6DB915ADCF9E4B9CED35C2F619BF47F6D70C1204D87E843A913EA
41B00E2FC1036835DF572EAAD474165C23DFE8A4478BF2F702A8BA63697AE7B5
21A6276F776106EDBF30F9F4AB9BFE451BFD48000DC9E6A9BCA55C613BA75C32
1D0BC5CA95723D9A9778F9E1BEAF410854E2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 42 /asterisk put
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 52 /four put
dup 77 /M put
dup 78 /N put
dup 83 /S put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BC784E9865B00EE8B49B918E886049F1F4939403EADAB83A4D8C332E
2221AF8F6F4A4954501CB6A6268AC96F7091245F034BD65542DF47BC7BBAD667
1EE6AF9187E298CB7AABA58E3FB5B4C7E86616C1A830A4A937C265CC28A83EED
8F3C971D6DF5A50A615B713F5332E0CF05C754FD76916FECE4DB2807334C34E1
E2418FFF1B4429A564AB857F1E23337C75E729645AED52B51C319F277F0FD789
C8D5F56EE75D274F2162F29FB4678AB60589673AAE818EF0F2118EE707E02AC0
8F2AA72F8AD5DBF7D86C88CFEB01FE139D653820FB3EEA998267FB51CF42EEAD
7BB3C9653DB104E25A5E946CBD35809C3AD0F81A6BDBF371E865A1D375A952EC
8D65E617F6D621053402A291181B46D6323843FFE132EEA49E11D6BD6E0DCEED
C2A779D7BD85B9A80845B563220566FEB8F341AACA7EBE751EC56EB5C80EE2A7
AAF2CA12D1EB4548266CE8C37D24E2CDE66BC6BA989EBB3EC8E44363ED00547D
4FB447CBC5C99131B436E3695F522B3A9F1E34262CA7187A8197CAFF1544C76C
128632A537E9C8716178D761A576FA21F4827C86B279BD50B6C283CE1269D3CB
DF87550E1A79FF9662B29E516AA62E69FF6EC021E852C94320ABC74B530E6FD4
0B9D941750526FDCE7374B7D1C794564A9930E513ECC369824089657FC7431DB
8A8049BC421B19A2314A738FEBC3622639F8A679EFFF93521CEAD577EF8332A7
7F78B569AB43530E0F38E35ECDC43A5549298B65440ABDF62E62D816B855C457
89C3BC78724980C415B399C2439C8EA8CE565F58EBD5631C8D4EEBFE5B30E78A
EF5524EAD031E35FC96CB8E5912BA7CFEC1A4F507FADCC056E26B5942502CD5C
73ADD38A23812FA8314F9DFAA6279CA854505B73BA30F180F8DFB0CEC461D61D
D900F951767AF33F88BA6963957F3DBE73F5B778DFA27683CC8BEE1520D6D5E7
7DE5D40F44E5AE65FBC7CA2BA5335011469261C3D3798EDA35F0070997D5235A
CCEB6E55A714B99055422BD91D049870FC31E08B80C24D6ADFE3D9C2D6FE50EB
C26F04A92E0F947A049F85C480380B41079083C7A24C23882B1FE802167DBD2C
10D1EADC6DB9D4930D232E46567CDF9F8AA1E55C898E43AC029CAD688346E118
565612FB35844F8CF727A3862E6C5A54C77E8AC9F4A2C7B9CE8168AE75363C56
2F1814219D04A0F0B4BA11F6D5EE1BA8FBBAB10DC3369B935EEB00AC742F7112
5483E86B843969C1865449748CE16F5CA126159E3BFF3131E1F95F847B32136F
42BD39092C3F1270F8002D715B581FE9C9F21A1B026E7EC251BCF3FCF6E3813D
0A5D4BA4C9423659107E2D6F6D5B92E090C0B3C90B8A7C09111A3545EB05B99C
1400C3A2D1DE3FCB5760A6175A8B819B2B3F9362359E2AEE39C9B3B998D9DA22
2D336FCDA9C21AD2A2AF3AB963C363F0C0C15A8979200D56068B4BE6C5E774C0
686AC459E8F5D2E3260C06F84B71A847945ADCF67AF9998A13CF241787C0AE9B
2F0DFBCB8D9FAAD2F751142DCCE80141EC85549028E729D3F851FF7D500755EB
58FCBDB34B9B5DAECFCD5CB4BA2640F3FE845E6E8C79C027CCF40F2233CF9C41
54A343E30371872603FDDEB1211ACE8B059458BD847582D67DDF050A98F6D414
E5924CB6360974227EAB947E5AC9C498415D9E331A26A5D476082471E581AC4A
AEF071D0D045D643A5D249D7231722FBBCB0327821716758B6732B37CAE26F9F
F5CB181AACDC34296D7F60525AB73164737B3D27909A1EA588695F3D1965F6E6
FF2DCF2C229E7511BC937F3A46099923BB2A472D1EF43E7EE4488417B6DBA36C
A9C1304A6CCB64AC00E050AF374980EE770F8D6BDDD71811041A00F02EA0C41F
0E3762D6D8899AE511181345B4AB5B8F44442C622ED5D20002D28447543A9763
42D868AF622308DC340EE032FA092071165C9F349074A92E7579020E402F7D2E
86CBEFC52837CDA5F707C3F7447D2C937B3A57F94E1D5AFDF0F0D8C532005803
002AD6F8EA1FE36E87684D6E73EDED6AC077F8F7610972B4076AAA0419A54850
A42DE28F6CA79B3364C6139B28DEBB59D3E4FC5F17192E5E7317BBB1B5E06618
964A2AE35A95E58173866A7AF98B3985BBF4366F105A4D113BDE0010BAF09A2F
F0C57A362157C34107D819F49AAC41FEC814AB7CE58832DAEE5985A927691A95
2BC31C2CA363A717897B276DED07853D0C2382674D106FE6F998AA421295267B
B491452404EF6A7ACC4036686684939432A9C17D90E9D048C1E2D67651A61F7C
033133AE6AF905F0D024E3032040AB3AF0DD2F23AE1C390C7CB0646FBEC43452
C6A25EA4D92B861A88F13C02D931ABFB39B6B31147020D131CB91E3F94DD639F
2C966D3AE81EF3465323714FBE225EF72CA3BF378CED2557ED8A2BC8DEE14119
2D06DD1AE4EBF25B4CCA8273ED22660704BA9D4AA11295B9021B196551BF2DD7
7C9E145891BB907C10DA970A5D33E5F77155C921DCA7AF98340DC39EE1C68D5D
36F83B24E76C4E5CF0C2E34F92F68D7C6683DCD23A8BB145941331D64963C9ED
5DF76139AF2A513982C4B4B6EFE7F418BFAD008B96390CCF34CFF89C483B35B2
41A9036AC80B17833DCD84D206004CD16C6027BCD1A3F9D3CB26187163466A14
774AC4E3602175FFA6FBDADC50A5EACAEA2B4A78E96F3D70E059545F33E8F766
C82D276D7ED1A50D60672A5AD00D781E05E889CE353E185FEBD0F4C2CA766F68
1200CD15B6342DC6F657380578DDF1219A3A106327D3DF0A7275EA20BA45460A
8F5348E8A51E9A9BFB9FCBEF5079431F9CC7A9DD4179EC8768185A67A1BC40B8
684DBC1C840DBE6FB44F830C306AE3E6805DD50F2DFF041F4D3E7FAE69C37EB9
87208600EEBEF8AC758D5063ADFE717694E558E57405A44D100851E8CB09C88C
78C12FD42553ADDF686E34B16EBDB956C3849ED5150FFFB0E0574B6561E7EA8B
E3D072635DE295AE44D3F966FFE434309DB026A86438AD1421669F3AB383480D
821861CA5DB8C3DE1DB10B379CAFBDDDCA190F6A7DD64896DA4AA536B5E93CC4
DF99979641F34137B9D20963AF7AF7B9B3B8CEC84B0BD5DB385B5D122C6194A2
573D895E0CF45DB6F6DE04F1235B422FB053EE5151DEF3917114BA99BFBBF027
9A69DF7E29DD66D7DADE1894F4B535067F2F8250AE31CFA802F0F726C898029B
9EC4279458D47210C537E36F3574E89D01E903C02E6396D95D3203088F3DB881
4B1D5EE39D88C5F6A858182E90C55E4548F9B1B4D668E245A79D02F0FFCB78DC
2C1CA278612EF1B80B74B8724E27A0D2408733B94F2CA8440A5DAA76C1781D8A
7AB8649075E93A28A5FD9A166BE5B2A13007E085A4852032FEDC007172D78A27
6A9F1A7CCDBDD49E50EF458D4F267C75F0ADBA963AC37FE49518064B60307987
1CA0F368AA477E9334A38F131A74DDD5432B44A6EEE528E6C1DB0CDB39101B77
BD32F7CDDC58C0768AE27DDA9130E1C21E886A144B957DF8A04C92249D09E494
A351ED4566BE1F818C19D94A5DF9C78F9B2AD25C577C7A934E9C937DBD0D6E67
4CB8324C02488C4A9A0F849C7B23D2313AFF7534A3CD73F2283F7A8FCBC1A8F7
F8A0E3F02AE346B79C174E981A4342BFD7AC33B64903EF151B75AD47B97CCAD5
E14F82A4AEBD897C6DDFB1EC13570988E5CE44A9B388397E50F8A51F3A026FF5
7FCC2B99D8614513EBA1E10A2D6142A29EC69FA475B48BD06CD631AF8C0106F2
784E298ADC6A4D940C7CEDA00073417C5B4DA9204CE871EC4111524A038F4DB2
D47FBDDA0410B4B5ADE87539301A86D7A0058127971E1B794CA06A31FCA59CD7
56A90264D3016E52302994B83F4EB134136E9E5A5A75C54924F71B2A46BC5C46
66204864B52FE2C639AB96C39DE1E61F25719BBCF865CD842CD0E991B09797D4
358CE6C62767D87464D58336FF39A33D6F5AC5485F7ED2371AADBF20112A8996
A77F163D7EB5BB48E969CF574FC9327576E79E005861AC506100D8B8878C599E
91DA26E2D6F89CD5750F3AECA8B299B2E5E567925CC653D47758C7BF67733296
D3556497D78B64F9C15975419187FB59C28F85CC1B7F6633338A5192AC3E1FC0
281F4C93BE37642396FD67AFD3EDB2B9073836DA583D04A52D61BB786D014402
52BC3FCF31D078653CA4EA2F6229EB94BDFB519C6C9CAD51B17009BCCE5E2B1D
6AD909AEB1923EC3E0485DADDEC703DD816DC3696DEBD4685D46A5E558CB2720
A31DFA67E97D4583B6C5AE92FEA8850DC44684CF47870F1C349AF5485D1B299D
88F70299E00822129D772EAF934EF4E96A96E6B7B75282BBB05DC3D1D8886EA5
FC72C34646E2BD7622FBD9C2DB3598B016EBB4232EABE3F408CEB3ADD4C8CAE1
CF92FA1662D2E6AD8FE1EE1AD37B44202C754ED97AFFF7767557D83B2247142E
F941934064F2917169C3C01FE4D4EFEDC87C80691E25A6A1A336F0A584E9A0A6
706A315AB25EC761B25630C1D7C3783FF8D47C54E0B22E062C267B038565AC35
BC1DC002870A0AC9307649E00656185525BC9FA8224A30CC25FFF0C8B077A919
71723D02CBA43D5F92C1C253C6C055C5E3E0A77254E033701FB709E6DCA9FCDC
343325F12147C58D9B42FF081D50EB5026D1CAE7EEAD3D2C0A8AE5BA778A4815
F49F441E397D752E331AE353589D7AE99A2B0E352383C7670BF45228B3874B69
71EC7E8CA52D28909B9F92311E67F7A5B9B4CE67911E251AC3D602A874637425
6DBF63E07D13E9F98C16BA5C0CD2A249ACBB7354E1EA407B4E848E5DE00F5FF1
C1D4ACD8A0025F36C4899E2EB9153519FD76FA6246276BC784F68DDE30ED584B
F2B05215C186C3B07358583FA93BF5A4A422F8BC2F6B61C4084B43FA163DC1C2
A4923D3685F57723845E5F4863E34A0354B33C170BCA38AB9DC3F787A6329D4B
A6C19D8D0BE0798EB8FFE2E6DBB7CCC3DC4D9211D89834ABF21387CD18C98D7B
5E61BA548FDA8C0C08224E6CE63EA4FEC2E98862581FDFED3550F61B26B3C757
9A4BFA6A45127225E92A97627CD0F2298DF1B7FC0B0675EC90C91256D5F37EA9
DCD4AB4A8EB213A289AE01707CC482B485D420387C9EDEBBBFE138CDA95E0B84
D1CC4529C0E77DAFAA72410ED3852B54DF720EEF5BFD426471F956CD66A003D3
0A62C22E71B6978C204EA802466A5BC5B5ABC596EF11D767C5DD12A5E9E02FB9
D08A962FE0AB484334FF0D1D66D135E0BA2AD8479C4B53825B9C0032F962E917
CF24068BC2EB92E8279556CBB8D4C6399CAB351D89C353528DE6DF47C5B6CC97
5A87F80BD6334C9C304E269DE21A9AA9A1FB08C8BF2FEB90DC9656C0DC5B6B23
55D754BB3CDA5543201D0A18B2F4C33EADF76E482A9D448900314B87390CE8D6
3CDD5573097615BAEE6B2D72DBF99BD0628A7624E997941B4EF0ABC68791094A
80080543A457CF8D949F5AE725FB0699D3E38563E9D926A3E542B2D6D3137763
497A1E931246A3D2257F78ADB60EC2057A78417ED5F9781B7A477556F7C3A6CA
1DA32C7D75E8E3C876AC3F6A37374A544C25AE548F5CC5BA26605DFF4D26E04A
6C23E702B5D80AA7F2F33A675D90957CDF3BFDAD583B5475931EB1022BF2CB7C
24ABD7EB01575F66A74C1E6B5736C0A8B2E71F7950C85DAF6A95E925DC0A67FF
19BA3773E8A93401E79BD49DE4094D6B73569AA2457F47FD10B53B8D43E92C35
58A7338A83FBF8E9813C6F7B5752AA49299A0989D54CA8C9804C508CD8AF37FB
C87AD815AD11328663BE2F26E7EA4DA5A98D38031621AA3EE60A99E91E413974
A422D3AF4401021D075D9F082B67E5F95C35B387B7F393FF874953FF9ADF5F3D
B210BE6326D51D84D0D14336676902FA0225625B7233925D529B9D137E5EE21B
7B08198512A45064E1E1767949C20CDC53F4A761529ACA281BE0F96649E7505A
66D56535582FE913C92566F8F560B500260949F259A837862CC6BCAE2CC9398D
5323CDF91CAA1E5FF6F4AF5E1C677DFBAB85CD016BAC0B74B6D225D322A103A7
B38E64D3312A9284EF4D5670446780856E151843CA3D363C0A9C9F66255C3B1E
D81B63BFEE2B6B5D222BC1B97B5CE15D0B06C0E397541633C8EBE1CEA03031DB
67FE623F5DDF90A76C47481B69E927F02450C9C498C4881CBAD3C0EA90FBB27C
730957D79D98A8147D9E0840904E2F6C619E5643C6FE98B2CE8751016EDDD1B2
1A0C43D543FC6160693F4739092C02ED38C5EA743B865555E8BC2231F9783B49
298617AFE84D82F738ED241DF4712A8727ABA77151DEF98B78388372FBA31438
4E0C1ED35750EB27104ABFE46F53B92449CDF6853CF031119B059173C172761C
A2911430D96459730661E560FA5CFD146F3AB143EB00010122FA401BBBEF7890
8239B5E7A418434596A9AF9F76053E76A1CBE5B5149E9AB276569A12DE7F87A2
1044C7389F91700B21CE476EA531707C11096A4EF772612D25C98ABEC8BDF568
954C7E62CCCB7FE26128E411DA083E144EF89BD21612971D4BA9DB6E572645C4
2BECC0ABF7D05580264F0208BBD271C76EE6AD4560DB83B48360F0934D66AA42
DC80537E44ACD69C7070D9D15DEB507F5F5919F13415D3FFE74715E54D084FB9
D2DD0F55883B85901B182D6A78D6D664AB15E5F92A0FA9944EC1299E8F868987
C1773E06001F56278F21FED910EE558C3A659B5FC31DE3A137C932D83F00B79E
D226A69CAE3E57F2E48FDFC447C0DFEC6A678D40C1A672BCACE282BD713FAAE6
FD70434C3B4562267D190FAC9C4DA6571CB1AAD65CBDB4818C6F3F96C225B7FD
27ABEE82B7EBE9B752CEE54E819A020D7402BA6E3ED7505FEAF43DDEE12BB7FF
89B816B949DEDE231BEC71912A20DC9DD3A3C44351141AC452F8239591C3727A
312328F4B7E3939E62AFE6FB242D63710BDAB1B3D727112D727E87950CA28D2E
0659213041F8D9D97EAC5C695E52AF4DB3EF69D8412EE373CA2CBDDCD23DA72D
E6AEA5FA456573D0485ED9A59CA5350CCD338DF1C5CDE5E9FE151DFB64D9EEED
9B53DF2C0AE7F5BC0DA5F3FAAB3A277400D91DA1574E5DD5D3E3E4439841A8ED
BD93AB1175FA19E4D9386377827F365EA2E17F79F6ECA2F91545FCDF28AEA846
806284166815210CDA331C117DB733EC7A4C478D3E88003E83854C7E0E3C5DEA
61F088DBB42C24DA217FD5E1F237D1BE4325D48864528585CB963B943FC826F3
DC498DB6D9417E0D6D41FE6A3879956CF972B7F288E33977F9B7A5B27322E5C3
5BC7DD2643596B2EC81D015FAC89FBC1A752A37745C92B848C04E6CD757DB14D
AD03D736B37E75FBE4D38759A5AC07081D0F5D06DA348D013F5D2D58C5177C3E
9996781790A14DC551E44693ABD0F6B8942120BB6F233BB2380BA9265056BAB3
6F8E08319B2D9C179A556456C8F85A4514ABC6008A4482DE3E42D114DF01FAC8
3803994EE47FEDAB2B3CBEB6F6D099D19E3385C4D84C6E56B6540D91598350C6
B0E11A1BF9B2B633F071D8E20D5BE95B0E9982C4F024C777D5AE4CF7C13A8C4F
69D61CC17D2C87A6DCE828CFEFF5DAF052399FA894640511F7C03F438A8875B8
43372085F3BE796D1BEAA91A4D1EBD4F64AF63838416E32650AFBC827FCBB658
51429F07D0CDE6306A70481C3E5FEE2A6FC2CD79E45580821923CB22360F079D
9616FB8D07B449B0523E005445AFF9FD7FBEE75E68192640CA647A6E72BE8EA9
BEE7609E23C877354AF049FFCFFC996586E3557F2AD3F35C9C750B7111AB134B
D8831638C75002362E5C694784A1A153B54FFB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (autotools_flow.dvi)
@start /Fa 140[33 33 2[42 1[69 23 5[25 37 88[46 12[{}8
83.022 /CMSL10 rf /Fb 138[46 32 33 33 2[42 46 69 23 44
1[23 46 42 25 37 46 37 46 42 10[62 2[46 4[62 76 24[42
4[42 23 1[23 1[42 29[46 12[{}28 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop Black Black 1 TeXcolorgray 639
1621 a Fb(a)p Black 1 TeXcolorgray 3432 476 a(a)p Black
667 1605 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 4.26773 4.26773
.5 CLW mul sub 0 360 arc closepath gsave 45. rotate 2.0 SLW .6 1 .6
 setrgbcolor 1.5 LineFill  grestore gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial 50
w Fa(\014les)27 b(from)h Fb(SVN,)128 b @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 4.26773 4.26773
.5 CLW mul sub 0 360 arc closepath gsave 1 1 .5  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 49 w(autoto)r(ols)27 b(distribution)739
746 y
 tx@Dict begin tx@NodeDict begin {11.3 8.42133 61.38814 30.69406 1.43933
} false /N@n_config_m4 16 {InitRnode } NewNode end end
 739 746 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 6.3
neg 55.46681 11.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 45. rotate 2.0 SLW .6 1 .6  setrgbcolor 1.5 LineFill
 grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
Fb(con\014g/*.m4)772 905 y
 tx@Dict begin tx@NodeDict begin {10.74445 3.8 53.43346 26.71672 3.47221
} false /N@n_aclocal.m4 16 {InitRnode } NewNode end end
 772 905 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 49.63345 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fb(aclo)r(cal.m4)747 1100 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.74445 59.29456 29.64728
2.5 } false /N@n_cnf.ac 16 {InitRnode } NewNode end end

747 1100 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.74445
neg 55.49455 10.74445 .5 Frame  gsave 45. rotate 2.0 SLW .6 1 .6  setrgbcolor
1.5 LineFill  grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke
 grestore end
 
@endspecial
Fb(con\014gure.ac)735 1237 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.92133 62.22145 31.11072
2.41156 } false /N@n_mkf.am 16 {InitRnode } NewNode end end
 735 1237 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 56.30013 10.74445 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 45. rotate 2.0 SLW .6 1 .6  setrgbcolor 1.5 LineFill
 grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fb(Mak)n(e\014le.am)1570 980
y
 tx@Dict begin tx@NodeDict begin {} false /N@n_ag 14 {/X 47.32474 def
/Y 2.5 def /w 70.71724 def /h 61.54622 def /NodePos { OvalNodePos }
def} NewNode end end
 1570 980 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 70.71724 CLW 2
div sub 61.54622 CLW 2 div sub 47.32474 2.5 Ellipse closepath gsave
45. rotate 2.0 SLW .6 1 .6  setrgbcolor 1.5 LineFill  grestore gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1769
690 a Fb(autogen.sh)1839 821 y
 tx@Dict begin tx@NodeDict begin {} false /N@n_aclocal 14 {/X 14.86115
def /Y 3.47221 def /w 24.81367 def /h 8.70972 def /NodePos { OvalNodePos
} def} NewNode end end
 1839 821 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 24.81367 CLW 2
div sub 8.70972 CLW 2 div sub 14.86115 3.47221 Ellipse closepath gsave
1 1 .5  setrgbcolor fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fb(aclo)r(cal)1806 966 y
 tx@Dict begin tx@NodeDict begin {} false /N@n_ac 14 {/X 18.88895 def
/Y 3.47221 def /w 30.50899 def /h 8.70972 def /NodePos { OvalNodePos
} def} NewNode end end
 1806
966 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 30.50899 CLW 2
div sub 8.70972 CLW 2 div sub 18.88895 3.47221 Ellipse closepath gsave
1 1 .5  setrgbcolor fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fb(auto)r(conf)1762
1111 y
 tx@Dict begin tx@NodeDict begin {} false /N@n_ah 14 {/X 24.1806 def
/Y 3.47221 def /w 37.99141 def /h 8.70972 def /NodePos { OvalNodePos
} def} NewNode end end
 1762 1111 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 37.99141 CLW 2
div sub 8.70972 CLW 2 div sub 24.1806 3.47221 Ellipse closepath gsave
1 1 .5  setrgbcolor fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial
Fb(autoheader)1787 1255 y
 tx@Dict begin tx@NodeDict begin {} false /N@n_am 14 {/X 21.11116 def
/Y 3.47221 def /w 33.65121 def /h 8.70972 def /NodePos { OvalNodePos
} def} NewNode end end
 1787 1255 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 33.65121 CLW 2
div sub 8.70972 CLW 2 div sub 21.11116 3.47221 Ellipse closepath gsave
1 1 .5  setrgbcolor fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end


@endspecial Fb(automak)n(e)2725 628 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.74445 77.31131 38.65565
2.5 } false /N@n_cnf.h.in 16 {InitRnode } NewNode end end
 2725 628 a 31
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.74445
neg 73.5113 10.74445 .5 Frame  gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore end
 
@endspecial Fb(doug)p 2937
628 25 4 v 29 w(con\014g.h.in)2808 765 y
 tx@Dict begin tx@NodeDict begin {10.74445 5.92133 57.22144 28.61072
2.41156 } false /N@n_mkf.in 16 {InitRnode } NewNode end end
 2808 765 a 32
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 51.30011 10.74445 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fb(Mak)n(e\014le.in)2794
1086 y
 tx@Dict begin tx@NodeDict begin {} false /N@n_cnf 14 {/X 19.73615
def /Y 2.5 def /w 31.70694 def /h 10.08444 def /NodePos { OvalNodePos
} def} NewNode end end
 2794 1086 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 31.70694 CLW 2
div sub 10.08444 CLW 2 div sub 19.73615 2.5 Ellipse closepath gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
Fb(con\014gure)2732 1253 y
 tx@Dict begin tx@NodeDict begin {} false /N@n_cnf.st 14 {/X 27.27783
def /Y 2.5 def /w 42.3709 def /h 10.08444 def /NodePos { OvalNodePos
} def} NewNode end end
 2732 1253 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0 360 42.3709 CLW 2
div sub 10.08444 CLW 2 div sub 27.27783 2.5 Ellipse closepath gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial Fb(con\014g.status)639 1621
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_config_m4 /N@n_aclocal InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_cnf.ac /N@n_aclocal InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_aclocal /N@n_aclocal.m4 InitNC { NCLine  } if end gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 639 1621
a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_aclocal.m4 /N@n_ac InitNC { NCLine  } if end gsave 0.8 SLW
0  setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_cnf.ac /N@n_ac InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_ac /N@n_cnf InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_cnf.ac /N@n_ah InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_ah /N@n_cnf.h.in InitNC { NCLine  } if end gsave 0.8 SLW 0
 setgray 0 setlinecap stroke  grestore  grestore end
 639 1621
a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_cnf.ac /N@n_am InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_mkf.am /N@n_am InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a 639 1621
a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 6.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@n_am /N@n_mkf.in InitNC { NCLine  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 639 1621 a Black Black eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
